#include<bits/stdc++.h>
using namespace std;

/**
 * 큰 문제를 분할해서 해결할 때 많이 사용한다.
 * 굉장히 큰 n을 작은 값으로 만들어서 쪼개서 풀 때 사용한다.
 * 기저
 * 로직
 * 다시 호출 
 * 구조로 되어 있음.
 * 
 * 주의 사항:
 * - 반드시 기저 상황(=종료 조건)을 써야 한다.
 * - 사이클이 있는 경우 쓰면 안 됨. (매개 변수 자체가 변하면서 다른 동작을 하게 되는데 f(b)가 f(a)를 호출하게 되면 무한 루프됨.)
 * - 반복문으로 될 것 같으면 반복문으로 푸는 것이 맞음.
 * dp 중에서 탑 바텀으로 푸는 문제 중에 함수 호출이 느슨한 경우...? 가 있는데 이런 경우엔 재귀함수가 더 빠름.
 * 
 * 점화식을 찾고 그걸 기반으로 함수를 만드는 경우가 많음.
 * 
 * 기저 사례는 왜 맨 앞에 두어야 하는가?
 * 1. 효율성 - 상단에 배치하면 메인 로직을 진행하지 않고 바로 끝낼 수 있음.
 * 2. 무한재귀방지 - 메인 로직이 먼저 시작되면 무한 재귀가 될 수 있음.
*/
int fact_rec(int n){
    // 기저. 종료 조건.
    if(n == 1 || n == 0) return 1;
    // 로직
    return n * fact_rec(n-1);
}

int fibo(int n){
    cout << "fibo : " << n << '\n';
    if(n == 0 || n == 1) return n;
    return fibo(n-1) + fibo(n-2);
}

int main(){

}
